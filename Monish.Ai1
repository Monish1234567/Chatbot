import math

# Constants for player symbols
HUMAN = 'X'
AI = 'O'
EMPTY = ' '

# Function to print the current state of the board
def print_board(board):
    for row in board:
        print(' | '.join(row))
        print('---------')

# Function to check if a player has won
def check_winner(board, player):
    # Check rows and columns
    for i in range(3):
        if all(board[i][j] == player for j in range(3)) or all(board[j][i] == player for j in range(3)):
            return True
    # Check diagonals
    if all(board[i][i] == player for i in range(3)) or all(board[i][2-i] == player for i in range(3)):
        return True
    return False

# Function to check if the board is full
def board_full(board):
    return all(board[i][j] != EMPTY for i in range(3) for j in range(3))

# Function to evaluate the score of the board for the AI player
def evaluate(board):
    if check_winner(board, AI):
        return 1
    elif check_winner(board, HUMAN):
        return -1
    else:
        return 0

# Minimax function
def minimax(board, depth, maximizing_player):
    if check_winner(board, AI):
        return 1
    elif check_winner(board, HUMAN):
        return -1
    elif board_full(board):
        return 0

    if maximizing_player:
        max_eval = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = AI
                    eval = minimax(board, depth+1, False)
                    board[i][j] = EMPTY
                    max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = HUMAN
                    eval = minimax(board, depth+1, True)
                    board[i][j] = EMPTY
                    min_eval = min(min_eval, eval)
        return min_eval

# Function to find the best move for the AI player
def find_best_move(board):
    best_eval = -math.inf
    best_move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = AI
                eval = minimax(board, 0, False)
                board[i][j] = EMPTY
                if eval > best_eval:
                    best_eval = eval
                    best_move = (i, j)
    return best_move

# Main game loop
def play_game():
    board = [[EMPTY] * 3 for _ in range(3)]
    print_board(board)
    while not check_winner(board, HUMAN) and not check_winner(board, AI) and not board_full(board):
        human_move = input("Enter your move (row col): ").split()
        human_move = tuple(map(int, human_move))
        if board[human_move[0]][human_move[1]] == EMPTY:
            board[human_move[0]][human_move[1]] = HUMAN
            print_board(board)
            if check_winner(board, HUMAN):
                print("You win!")
                break
            elif board_full(board):
                print("It's a tie!")
                break
            ai_move = find_best_move(board)
            board[ai_move[0]][ai_move[1]] = AI
            print("AI's move:")
            print_board(board)
            if check_winner(board, AI):
                print("AI wins!")
                break
            elif board_full(board):
                print("It's a tie!")
                break
        else:
            print("Invalid move. Try again.")

# Start the game
play_game()
